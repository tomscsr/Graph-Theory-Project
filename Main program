# cycle_safe_scheduler.py

import os
from time import sleep
from collections import deque

# === Task Parser ===
class Task:
    # Represents a task with an ID, duration, and optional list of predecessors
    def __init__(self, id, duration, predecessors=None):
        self.id = id
        self.duration = duration
        self.predecessors = predecessors or []

def parse_constraint_file(filepath):
    # Reads a task constraint file and builds a dictionary of Task objects
    if not os.path.exists(filepath):
        raise FileNotFoundError(f"File not found: {filepath}")

    tasks = {}
    with open(filepath, 'r', encoding='utf-8') as f:
        lines = f.readlines()

    for line_num, line in enumerate(lines, 1):
        if not line.strip():
            continue  # Skip empty lines
        parts = line.strip().split()
        if len(parts) < 2:
            raise ValueError(f"Line {line_num} is invalid: '{line.strip()}'")
        try:
            task_id = int(parts[0])  # Task ID
            duration = int(parts[1])  # Task duration
            predecessors = list(map(int, parts[2:])) if len(parts) > 2 else []  # Optional predecessors
        except ValueError:
            raise ValueError(f"Line {line_num} has non-integer values: '{line.strip()}'")
        if task_id in tasks:
            raise ValueError(f"Duplicate task ID {task_id} found at line {line_num}")
        tasks[task_id] = Task(task_id, duration, predecessors)

    return tasks

# === Graph Handling ===
def build_graph_matrix(tasks):
    # Builds the adjacency matrix of the task graph, with Start and End fictive nodes
    task_ids = sorted(tasks.keys())
    n = len(task_ids)

    # Maps real task IDs to matrix indices (1-based)
    id_to_index = {task_id: idx + 1 for idx, task_id in enumerate(task_ids)}
    index_to_id = {idx + 1: task_id for idx, task_id in enumerate(task_ids)}

    total_nodes = n + 2  # Add Start (0) and End (N+1)
    matrix = [['*' for _ in range(total_nodes)] for _ in range(total_nodes)]  # Initialize with '*'

    # Add edge from Start (0) to tasks without predecessors
    for task_id, task in tasks.items():
        if not task.predecessors:
            matrix[0][id_to_index[task_id]] = 0

    # Add edges between tasks based on precedence relations
    for task_id, task in tasks.items():
        for pred in task.predecessors:
            matrix[id_to_index[pred]][id_to_index[task_id]] = tasks[pred].duration

    # Add edges from tasks without successors to End (last node)
    successors = {pred for task in tasks.values() for pred in task.predecessors}
    for task_id in task_ids:
        if task_id not in successors:
            matrix[id_to_index[task_id]][total_nodes - 1] = tasks[task_id].duration

    return matrix, total_nodes, index_to_id

def detect_cycle(matrix, total_nodes):
    # Detects cycles using entry point elimination method (variant of topological sort)
    print("\n* Detecting a cycle using entry point elimination")
    remaining = set(range(total_nodes))  # All nodes initially
    in_degrees = {i: 0 for i in range(total_nodes)}  # Count of incoming edges for each node

    # Count incoming edges
    for j in range(total_nodes):
        for i in range(total_nodes):
            if matrix[i][j] != '*':
                in_degrees[j] += 1

    # Repeatedly eliminate nodes with zero in-degree (entry points)
    while True:
        entry_points = [v for v in remaining if in_degrees[v] == 0]
        if not entry_points:
            break
        print(f"  Entry points: {entry_points}")
        for v in entry_points:
            remaining.remove(v)
            for j in range(total_nodes):
                if matrix[v][j] != '*':
                    in_degrees[j] -= 1

    # If nodes remain, a cycle exists
    if remaining:
        print(f"  Cycle detected! Remaining vertices: {sorted(remaining)}")
        return True
    else:
        print(" No cycle detected.")
        return False

def negative_weights(matrix):
    # Check for negative weights in the matrix
    print("\n* Checking for negative weights")
    has_negative = False
    for i in range(len(matrix)):
        for j in range(len(matrix)):
            if matrix[i][j] != '*' and matrix[i][j] < 0:
                print(f"  Negative weight at ({i}, {j})")
                has_negative = True
    if not has_negative:
        print(" No negative weights.")
    return has_negative

# === Scheduling Calculations ===
def compute_ranks(matrix, total_nodes, index_to_id):
    # Computes the rank of each node using longest path from Start
    ranks = {i: 0 for i in range(total_nodes)}  # Initialize all ranks to 0
    sorted_nodes = []
    to_process = [i for i in range(total_nodes) if all(matrix[j][i] == '*' for j in range(total_nodes))]

    # BFS-like process to update ranks
    while to_process:
        current = to_process.pop(0)
        sorted_nodes.append(current)
        for j in range(total_nodes):
            if matrix[current][j] != '*':
                ranks[j] = max(ranks[j], ranks[current] + 1)  # Update rank
                incoming = [i for i in range(total_nodes) if matrix[i][j] != '*']
                if all(i in sorted_nodes for i in incoming):
                    to_process.append(j)
    return ranks

def compute_earliest_dates(matrix, total_nodes, ranks):
    # Computes the earliest time each task can start
    earliest = {i: 0 for i in range(total_nodes)}
    sorted_nodes = sorted(range(total_nodes), key=lambda x: ranks[x])  # Topological order
    for i in sorted_nodes:
        for j in range(total_nodes):
            if matrix[i][j] != '*':
                earliest[j] = max(earliest[j], earliest[i] + matrix[i][j])
    return earliest

def compute_latest_dates(matrix, total_nodes, earliest, ranks):
    # Computes the latest time each task can start without delaying the project
    latest = {i: earliest[total_nodes - 1] for i in range(total_nodes)}  # Initialize to project duration
    sorted_nodes = sorted(range(total_nodes), key=lambda x: ranks[x], reverse=True)  # Reverse topological order
    for i in sorted_nodes:
        for j in range(total_nodes):
            if matrix[i][j] != '*':
                latest[i] = min(latest[i], latest[j] - matrix[i][j])
    return latest

def find_critical_paths(current, path, matrix, earliest, total_nodes):
    # Finds all critical paths from Start (0) to End (N+1) where float = 0
    if current == 0:
        yield [0] + path
    else:
        for i in range(total_nodes):
            if (matrix[i][current] != '*' and earliest[current] == earliest[i] + matrix[i][current]):
                yield from find_critical_paths(i, [current] + path, matrix, earliest, total_nodes)

# === Display Functions ===
def get_node_label(i, total_nodes, index_to_id):
    # Converts node index to human-readable label
    return "Start" if i == 0 else "End" if i == total_nodes - 1 else f"Task {index_to_id[i]}"

def display_matrix(matrix, total_nodes, index_to_id):
    # Displays the adjacency matrix of the graph
    print("\n=== Graph Matrix ===")
    col_width = 4
    header = " " * (col_width - 1) + "".join(f"{j:>{col_width}}" for j in range(total_nodes))
    print(header)
    print(" " * (col_width - 1) + "-" * (total_nodes * col_width))
    for i in range(total_nodes):
        row = f"{i:>{col_width - 1}}|"
        for j in range(total_nodes):
            val = matrix[i][j]
            row += f"{val if val != '*' else '*':>{col_width}}"
        print(row)

def display_data(label, data, total_nodes, index_to_id):
    # Generic function to display rank, earliest, latest, or float values
    print(f"\n=== {label} ===")
    for i in range(total_nodes):
        print(f"{get_node_label(i, total_nodes, index_to_id)}: {data[i]}")

def display_critical_paths(paths, total_nodes, index_to_id, earliest):
    # Displays all critical paths and their duration
    print("\n=== Critical Paths ===")
    if not paths:
        print("No critical paths found.")
    else:
        for idx, path in enumerate(paths, 1):
            path_str = " -> ".join(get_node_label(i, total_nodes, index_to_id) for i in path)
            print(f"Critical Path {idx}: {path_str} (Total duration: {earliest[total_nodes - 1]})")

# === Main Loop ===
def main():
    while True:
        try:
            # Ask user for a file to load
            print("\nEnter the number of the constraint table to work with (1-14), or 0 to exit:")
            constraint_nb = int(input("> "))
            if constraint_nb == 0:
                print("Goodbye!")
                break

            # Build graph from file
            filepath = f"table {constraint_nb}.txt"
            tasks = parse_constraint_file(filepath)
            matrix, total_nodes, index_to_id = build_graph_matrix(tasks)

            # Show graph matrix
            display_matrix(matrix, total_nodes, index_to_id)

            # Check if graph is valid
            has_cycle = detect_cycle(matrix, total_nodes)
            has_negative = negative_weights(matrix)

            if has_cycle:
                print("\n Scheduling computation skipped due to cycle.\n")
                continue  # Loop again for another file

            print("\n Valid scheduling graph. Computing scheduling data...\n")

            # Compute and display all scheduling information
            ranks = compute_ranks(matrix, total_nodes, index_to_id)
            earliest = compute_earliest_dates(matrix, total_nodes, ranks)
            latest = compute_latest_dates(matrix, total_nodes, earliest, ranks)
            floats = {i: latest[i] - earliest[i] for i in range(total_nodes)}
            critical_paths = list(find_critical_paths(total_nodes - 1, [], matrix, earliest, total_nodes))

            display_data("Rank", ranks, total_nodes, index_to_id)
            display_data("Earliest Start", earliest, total_nodes, index_to_id)
            display_data("Latest Start", latest, total_nodes, index_to_id)
            display_data("Total Float", floats, total_nodes, index_to_id)
            display_critical_paths(critical_paths, total_nodes, index_to_id, earliest)

        except Exception as e:
            print(f" Error: {e}")
            sleep(1)

if __name__ == "__main__":
    main()
