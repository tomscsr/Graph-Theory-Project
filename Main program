import numpy as np
import networkx as nx

def read_constraint_table(filename):
    with open(filename, 'r') as file:
        lines = file.readlines()
    
    tasks = {}
    for line in lines:
        values = list(map(int, line.split()))
        task_id = values[0]
        duration = values[1]
        predecessors = values[2:]
        tasks[task_id] = {'duration': duration, 'predecessors': predecessors}
    
    return tasks

def build_graph(tasks):
    G = nx.DiGraph()
    
    for task_id, data in tasks.items():
        G.add_node(task_id, duration=data['duration'])
        for pred in data['predecessors']:
            G.add_edge(pred, task_id, weight=tasks[pred]['duration'])
    
    return G

def check_graph_properties(G):
    if not nx.is_directed_acyclic_graph(G):
        print("Error: The graph contains a cycle!")
        return False
    
    for u, v, d in G.edges(data=True):
        if d['weight'] < 0:
            print("Error: The graph contains negative weight edges!")
            return False
    
    return True

def compute_ranks(G):
    ranks = {node: rank for rank, node in enumerate(nx.topological_sort(G))}
    return ranks

def compute_earliest_latest_floats(G):
    earliest_start = {node: 0 for node in G.nodes()}
    for node in nx.topological_sort(G):
        for successor in G.successors(node):
            earliest_start[successor] = max(
                earliest_start[successor], earliest_start[node] + G.nodes[node]['duration']
            )
    
    latest_start = earliest_start.copy()
    project_end = max(earliest_start.values())
    latest_start = {node: project_end for node in G.nodes()}
    
    for node in reversed(list(nx.topological_sort(G))):
        for predecessor in G.predecessors(node):
            latest_start[predecessor] = min(
                latest_start[predecessor], latest_start[node] - G.nodes[predecessor]['duration']
            )
    
    floats = {node: latest_start[node] - earliest_start[node] for node in G.nodes()}
    
    return earliest_start, latest_start, floats

def find_critical_path(G, earliest_start, latest_start):
    critical_path = [node for node in G.nodes() if earliest_start[node] == latest_start[node]]
    return critical_path

def main():
    while True:
        filename = input("Enter constraint table filename (or 'exit' to quit): ")
        if filename.lower() == 'exit':
            break
        
        tasks = read_constraint_table(filename)
        G = build_graph(tasks)
        
        print("Graph representation:")
        print(nx.adjacency_matrix(G).todense())
        
        if check_graph_properties(G):
            ranks = compute_ranks(G)
            print("Ranks:", ranks)
            
            earliest_start, latest_start, floats = compute_earliest_latest_floats(G)
            print("Earliest Start Times:", earliest_start)
            print("Latest Start Times:", latest_start)
            print("Floats:", floats)
            
            critical_path = find_critical_path(G, earliest_start, latest_start)
            print("Critical Path:", critical_path)

if __name__ == "__main__":
    main()
